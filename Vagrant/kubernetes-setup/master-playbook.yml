#Step 1: Install Docker and its dependent components
---
- hosts: all
  become: true
  tasks:
    - name: Load kernel module
      modprobe:
        name: "{{ item }}"
      with_items:
        - overlay
        - br_netfilter
    - name: Setup kernel
      sysctl:
        name: "{{ item }}"
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      with_items:
      - net.bridge.bridge-nf-call-iptables
      - net.ipv4.ip_forward
      - net.bridge.bridge-nf-call-ip6tables
      - net.bridge.bridge-nf-call-arptables
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Install docker and its dependecies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
      notify:
        - docker status
    - name: Replace Docker driver
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
      notify:
        - docker status
    - name: Add vagrant user to docker group
      user:
        name: vagrant
        group: docker
    # Step 2: Kubelet will not start if the system has swap enabled, so we are disabling swap using the below code.
    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0
    #3: Installing kubelet, kubeadm and kubectl using the below code
    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet={{ kubelet_version }}
          - kubeadm={{ kubeadm_version }}
          - kubectl={{ kubectl_version }}
    - name: Install etcdctl
      block:
        - name: Test etcdctl
          stat:
            path: /usr/local/bin/etcdctl
          register: etcdctl
        - name: Create script
          copy:
            dest: /tmp/etcdctl.sh
            content: |
              ETCD_VER=v3.4.16
              # choose either URL
              GOOGLE_URL=https://storage.googleapis.com/etcd
              GITHUB_URL=https://github.com/etcd-io/etcd/releases/download
              DOWNLOAD_URL=${GOOGLE_URL}

              rm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz
              rm -rf /tmp/etcd-download-test && mkdir -p /tmp/etcd-download-test

              curl -L ${DOWNLOAD_URL}/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz
              tar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C /tmp/etcd-download-test --strip-components=1
              rm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz
              mv /tmp/etcd-download-test/etcdctl /usr/local/bin/
              /usr/local/bin/etcdctl version
            mode: '0644'
          when: etcdctl.stat.exists == False
        - name: run script
          command: sh /tmp/etcdctl.sh
          when: etcdctl.stat.exists == False
    - name: Configure node ip
      lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
        create: yes
    - name: Fix Kubelet failed to get stats
      copy:
        dest: /etc/systemd/system/kubelet.service.d/11-kubeadm.conf
        content: |
          [Service]
          After=docker.service
      notify:
        - kubelet status
    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted
    #4: Initialize the Kubernetes cluster with kubeadm using the below code (applicable only on master node).
    - name: Check whether kubeadmin was initiated already
      command: nc -zv localhost 6443
      register: kubeadm
      ignore_errors: true
    - name: Remove previous installed
      command: kubeadmin reset --force
      when: kubeadm is failed
      ignore_errors: true
    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16
      when: kubeadm is failed
    #5: Setup the kube config file for the vagrant user to access the Kubernetes cluster using the below code.
    - name: Configure cgroup driver
      lineinfile:
        path: /var/lib/kubelet/config.yaml
        regexp: '^cgroupDriver*'
        line: 'cgroupDriver: systemd'
      notify:
        - docker status
        - kubelet status
    - name: Setup kubeconfig for vagrant user
      command: "{{ item }}"
      with_items:
        - mkdir -p /home/vagrant/.kube
        - cp -f /etc/kubernetes/admin.conf /home/vagrant/.kube/config
        - chown vagrant:vagrant /home/vagrant/.kube/config
    #6: Setup the container networking provider and the network policy engine using the below code.
    - name: Install calico pod network
      become: false
      command: "{{ item }}"
      with_items:
        - kubectl apply -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
        - kubectl apply -f https://docs.projectcalico.org/manifests/custom-resources.yaml
    #7: Generate kube join command for joining the node to the Kubernetes cluster and store the command in the file named join-command.
    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Copy join command to local file
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
      become: false
    - name: Copy kube config file to local file
      ansible.builtin.fetch:
        src: "/home/vagrant/.kube/config"
        dest: "./config"
        flat: yes
      become: false
  #8: Setup a handler for checking Docker daemon using the below code
  handlers:
    - name: docker status
      # service: name=docker state=restarted
      systemd:
        name: docker
        state: restarted
        enabled: yes
    - name: kubelet status
      # service: name=kubelet state=restarted
      systemd:
        name: kubelet
        state: restarted
        enabled: yes